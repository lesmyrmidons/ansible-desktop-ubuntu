- hosts: localhost
  connection: local
  gather_facts: 'True'

  vars:
    local_home: "{{ lookup('env','HOME') }}"
    antibody_version: 6.1.1
    vagrant_version: 2.2.10
    docker_apt_repository: "deb [arch={{ docker_apt_arch }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} focal {{ docker_apt_release_channel }}"

    repos_git_user:
      - { src: "https://github.com/lesmyrmidons/dotfiles.git", dest: "~/.setup/dotfile" }
      - { src: "https://github.com/lesmyrmidons/zsh-config.git", dest: "~/.setup/zsh_config" }
      - { src: "https://github.com/daniruiz/flat-remix-gnome.git", dest: "~/.setup/flat-remix-gnome" }
      # - { src: "https://github.com/lesmyrmidons/vim-config.git", dest: "~/.setup/vim_config" }

    repos_git_root:
      - { src: "https://github.com/ahmetb/kubectx", dest: "/opt/kubectx"}

    repository:
      - { repo: ppa:libreoffice/ppa }
      - { repo: "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" }
      - { repo: ppa:ansible/ansible, codename: eoan }
      - { repo: "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" }
      # Timeshift (backup)
      - { repo: ppa:teejee2008/ppa }
      - { repo: "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian eoan contrib" }
      - { repo: deb https://baltocdn.com/helm/stable/debian/ all main }
      - { repo: deb https://dl.yarnpkg.com/debian/ stable main }
      - { repo: ppa:graphics-drivers/ppa }
      # X-tile resize window
      - { repo: ppa:giuspen/ppa }
      # nvidia-power-indicator
      - { repo: ppa:nilarimogard/webupd8, codename: focal }
      # Logitech driver
      - { repo: ppa:solaar-unifying/stable }
      - { repo: deb https://apt.kubernetes.io/ kubernetes-xenial main }
      # Software photo Pinta
      - { repo: ppa:pinta-maintainers/pinta-stable }
      # driver Canon
      - { repo: ppa:thierry-f/fork-michael-gruz, codename: focal }
      - { repo: ppa:obsproject/obs-studio }
      # Signal
      - { repo: "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main" }
      # Ulauncher
      - { repo: ppa:agornostal/ulauncher }

    flatpak_remotes:
      - { name: flathub, url: https://dl.flathub.org/repo/flathub.flatpakrepo }

    repo_key:
      - { url: https://www.virtualbox.org/download/oracle_vbox_2016.asc }
      - { url: https://www.virtualbox.org/download/oracle_vbox.asc }
      - { url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc }
      - { url: https://download.teamviewer.com/download/linux/signature/TeamViewer2017.asc}
      - { url: https://baltocdn.com/helm/signing.asc }
      - { url: https://dl.yarnpkg.com/debian/pubkey.gpg }
      - { url: https://repo.nordvpn.com/gpg/nordvpn_public.asc }
      - { url: https://dl-ssl.google.com/linux/linux_signing_key.pub }
      - { url: https://packages.cloud.google.com/apt/doc/apt-key.gpg }
      - { url: https://packages.microsoft.com/keys/microsoft.asc }
      - { url: https://updates.signal.org/desktop/apt/keys.asc }

    repo_key_id:
      - { keyserver: keyserver.ubuntu.com, id: 93C4A3FD7BB9C367 }
      - { keyserver: keyserver.ubuntu.com, id: B05498B7 }

    apps_binary:
      - { name: https://github.com/sindresorhus/caprine/releases/download/v2.51.0/caprine_2.51.0_amd64.deb }
      - { name: "https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb" }
      - { name: "https://github.com/getantibody/antibody/releases/download/v{{ antibody_version }}/antibody_{{ antibody_version }}_linux_amd64.deb" }
      - { name: "http://phoronix-test-suite.com/releases/repo/pts.debian/files/phoronix-test-suite_10.0.1_all.deb" }
      - { name: "https://go.microsoft.com/fwlink/p/?LinkID=2112886&clcid=0x409&culture=en-us&country=US" }
      - { name: "https://go.microsoft.com/fwlink/?LinkID=760868" }
      - { name: "https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb" }
      - { name: "https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb"}

    apt_packages:
      - { name: aptitude }
      - { name: ack-grep }
      - { name: antiword }
      - { name: bash-completion }
      - { name: code }
      - { name: composer }
      - { name: chrome-gnome-shell }
      - { name: cnijfilter2 }
      - { name: cups-backend-bjnp }
      - { name: curl }
      - { name: ffmpeg }
      - { name: flatpak }
      - { name: fuse }
      - { name: gcc }
      - { name: git }
      - { name: git-flow }
      - { name: git-email }
      - { name: git-extras }
      - { name: git-svn }
      - { name: gnome-calendar }
      - { name: gnome-software-plugin-flatpak }
      - { name: gnome-tweaks }
      - { name: google-chrome-stable }
      - { name: gparted }
      - { name: hddtemp }
      - { name: helm }
      - { name: htop }
      - { name: httpie }
      - { name: hardinfo }
      - { name: kubectl }
      - { name: lm-sensors }
      - { name: libreoffice }
      - { name: nvidia-driver-460 }
      - { name: nvme-cli }
      - { name: obs-studio }
      - { name: pinta }
      - { name: pwgen }
      - { name: python3-dev }
      - { name: python3-pip }
      - { name: python3-setuptools }
      - { name: ripgrep }
      - { name: scangearmp2 }
      - { name: screenfetch }
      - { name: simple-scan }
      - { name: signal-desktop }
      - { name: solaar }
      - { name: steam-launcher }
      - { name: taskwarrior   }
      - { name: teams }
      - { name: terminator }
      - { name: tig }
      - { name: timeshift }
      - { name: timewarrior }
      - { name: tmux }
      - { name: tree }
      - { name: ulauncher }
      - { name: vim }
      - { name: virtualbox }
      - { name: virtualbox-ext-pack, state: absent }
      - { name: wget }
      - { name: xsane }
      - { name: yarn }
      - { name: zsh }

    snap_packages:
      - { name: bitwarden }
      - { name: brave, classic: False }
      - { name: bw }
      - { name: discord, classic: False }
      - { name: ledger-live-desktop, classic: False }
      - { name: postman, classic: False }
      - { name: slack }
      - { name: vlc, classic: False }
      - { name: whatsdesk, classic: False }
      - { name: zoom-client, classic: False }

    flatpak_packages:
      # monitoring Nvidia
      - { name: com.leinardi.gwe, state: absent }
      - { name: com.googleplaymusicdesktopplayer.GPMDP, state: absent }
      - { name: org.gtk.Gtk3theme.Yaru-remix, state: absent }
      - { name: org.gtk.Gtk3theme.Yaru-remix-dark, state: absent }
      - { name: org.gtk.Gtk3theme.Yaru-remix-light, state: absent }

    pip_packages:
      - { name: thefuck }
      # Pygments for zsh-syntax-highlighting
      - { name: Pygments }

    composer_packages:
      - { name: "hirak/prestissimo" }
      - { name: "psy/psysh" }

    npm_packages:
      - { name: "@angular/cli" }
      - { name: bower }
      - { name: coffee-script }
      - { name: hubot }
      - { name: karma }
      - { name: "@vue/cli" }
      - { name: localtunnel }
      - { name: n }
      - { name: nativefier }
      - { name: npm-check-updates }
      - { name: typescript }
      - { name: typings }

    fonts_url:
      - { url: https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf }
      - { url: https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold.ttf }
      - { url: https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Italic.ttf }
      - { url: https://github.com/romkatv/dotfiles-public/raw/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Bold%20Italic.ttf }

    link_user:
      - { src: ~/.setup/dotfile/gitconfig, dest: ~/.gitconfig }
      - { src: ~/.setup/dotfile/gitignore_global, dest: ~/.gitignore_global }
      - { src: ~/.setup/dotfile/_ansible.cfg, dest: ~/.ansible.cfg }
      - { src: ~/.setup/dotfile/_config/terminator, dest: ~/.config/terminator }
      - { src: ~/.setup/zsh_config/zshrc, dest: ~/.zshrc }
      - { src: ~/.setup/zsh_config/zsh_aliases, dest: ~/.zsh_aliases }
      - { src: ~/.setup/zsh_config/zsh_plugins.txt, dest: ~/.zsh_plugins.txt }
      - { src: /opt/kubectx/completion/kubectx.zsh, dest: /home/lesmyrmidons/.cache/antibody/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh/completions/_kubectx.zsh }
      - { src: /opt/kubectx/completion/kubens.zsh, dest: /home/lesmyrmidons/.cache/antibody/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh/completions/_kubens.zsh }

    link_root:
      - { src: /opt/kubectx/kubectx, dest: /usr/local/bin/kubectx }
      - { src: /opt/kubectx/kubens, dest: /usr/local/bin/kubens }

    directories:
      - { src: "{{ local_home }}/.fonts" }
      - { src: "{{ local_home }}/.cache/antibody/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh/completions" }
      - { src: "{{ local_home }}/.kube" }

  handlers:
    - name: run fc-cache
      shell: fc-cache -vf
    - name: sensors
      become: 'True'
      shell: sensors-detect --auto

  roles:
    - name: geerlingguy.docker
      become: 'True'
      docker_compose_version: "1.27.4"
      docker_users:
        - "{{ lookup('env','USER') }}"

  tasks:
    - name: Install nvm
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
      args:
        creates: "{{ local_home }}/.nvm/nvm.sh"
      tags:*
        - nvm

    - name: Add the nvidia module
      become: 'True'
      copy:
        dest: /etc/modprobe.d/blacklist-nvidia-nouveau.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          blacklist nouveau
          options nouveau modeset=0
      register: modprobe_nvidia
      tags:
        - apt
        - drivers
        - nvidia

    - name: Update kernel initramfs
      become: 'True'
      shell: update-initramfs -u
      when: modprobe_nvidia.changed
      tags:
        - apt
        - drivers
        - nvidia

    # Add and install packages APT
    - name: Add apt key for apps
      become: 'True'
      apt_key:
        url: "{{ item.url }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ repo_key }}"
      tags:
        - apt

    # Add and install packages APT
    - name: Add apt key for apps
      become: 'True'
      apt_key:
        keyserver: "{{ item.keyserver }}"
        id: "{{ item.id }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ repo_key_id }}"
      tags:
        - apt

    - name: Install repository ubuntu
      become: 'True'
      apt_repository:
        repo: "{{ item.repo }}"
        state: "{{ item.state|default('present') }}"
        codename: "{{ item.codename|default() }}"
      with_items: "{{ repository }}"
      tags:
        - apt

    - name: Update repositories Ubuntu
      become: 'True'
      apt:
        upgrade: 'True'
        update_cache: 'True'
      tags:
        - apt

    - name: Install packages Ubuntu
      become: 'True'
      package:
        name: "{{ item.name }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ apt_packages }}"
      ignore_errors: 'True'
      notify: sensors
      tags:
        - apt

    - name: Remove useless packages from the cache
      become: 'True'
      apt:
        autoclean: 'True'
        autoremove: 'True'
      tags:
        - apt

    - name: Install binary apps
      become: 'True'
      apt:
        deb: "{{ item.name }}"
      with_items: "{{ apps_binary }}"
      register: running_processes_ab
      tags:
        - zsh
        - dotfile
        - apt

    # snap store install
    - name: Install snap packages
      become: 'True'
      community.general.snap:
        name: "{{ item.name }}"
        channel: "{{ item.channel|default('latest/stable') }}"
        classic: "{{ item.classic|default('True') }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ snap_packages }}"
      ignore_errors: 'True'
      tags:
        - apt
        - apps

    # Flatpak store install
    - name: Add flatpak remote
      community.general.flatpak_remote:
        name: "{{ item.name }}"
        state: "{{ item.state|default('present') }}"
        flatpakrepo_url: "{{ item.url }}"
        method: user
      with_items: "{{ flatpak_remotes }}"
      tags:
        - apt
        - apps

    - name: Install flatpak packages
      community.general.flatpak:
        name: "{{ item.name }}"
        state: "{{ item.state|default('present') }}"
        remote: "{{ item.remote|default('flathub') }}"
        method: user
      with_items: "{{ flatpak_packages }}"
      tags:
        - apt
        - apps

    # configure zsh
    - name: Change default shell for {{ lookup('env','USER') }}
      become: 'True'
      user:
        name: "{{ lookup('env','USER') }}"
        shell: /bin/zsh
        append: 'True'
      tags:
        - apt
        - zsh
        - dotfile

    - name: Install kubeseal
      become: 'True'
      get_url:
        url: https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.12.6/kubeseal-linux-amd64
        dest: /usr/local/bin/kubeseal
        mode: '0755'
        owner: root
        group: root

    # install repositories github
    - name: git clone all repositories user
      git:
        repo: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: 'True'
        update: 'True'
        recursive: 'False'
        track_submodules: 'False'
      with_items: "{{ repos_git_user }}"
      tags:
        - zsh
        - dotfile

    - name: git clone all repositories root
      become: 'True'
      git:
        repo: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: 'True'
      with_items: "{{ repos_git_root }}"
      tags:
        - zsh
        - dotfile

    # Jetbrains
    - name: Installation de Jetbrains Tools
      become: 'True'
      unarchive:
        src: https://download.jetbrains.com/toolbox/jetbrains-toolbox-1.18.7455.tar.gz
        dest: "{{ local_home }}/Downloads/"
        remote_src: 'True'
      tags:
        - apt
        - jetbrains
        - apps

    - name: Move file Jetbrains Tools
      become: 'True'
      copy:
        src: "{{ local_home }}/Downloads/jetbrains-toolbox-1.18.7455/jetbrains-toolbox"
        dest: /usr/local/bin/jetbrains-toolbox
        mode: '0775'
      register: running_processes_jbt
      tags:
        - apt
        - jetbrains
        - apps

    - name:
      command: /usr/local/bin/jetbrains-toolbox
      when: running_processes_jbt.changed
      tags:
        - apt
        - jetbrains
        - apps

    - name: Install apps Python
      pip:
        name: "{{ item.name }}"
        state: "{{ item.state|default('present') }}"
      with_items: "{{ pip_packages }}"
      tags:
        - zsh
        - dotfile

    - name: Create Symlink for git
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: 'True'
        state: link
      with_items: "{{ link_user }}"
      tags:
        - zsh
        - dotfile

    - name: Create Symlink for binaries
      become: 'True'
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: 'True'
        state: link
      with_items: "{{ link_root }}"
      tags:
        - zsh
        - dotfile

    - name: load antibody
      shell: antibody bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.sh
      when: running_processes_ab.changed
      tags:
        - zsh
        - dotfile

    # Create folder for fonts
    - name: Create folder for fonts
      file:
        path: "{{ item.src }}"
        state: directory
        mode: '0755'
        owner: "{{ lookup('env','USER') }}"
        group: "{{ lookup('env','USER') }}"
      with_items: "{{ directories }}"
      tags:
        - zsh
        - dotfile

    # Download fonts
    - name: Download fonts
      get_url:
        url: "{{ item.url }}"
        dest: "{{ local_home }}/.fonts/"
        mode: '0644'
      with_items: "{{ fonts_url }}"
      notify: run fc-cache
      tags:
        - zsh
        - dotfile

    - name: Enabled lock screen
      shell: gsettings set org.gnome.desktop.lockdown disable-lock-screen false
      tags:
        - gnome
        - dotfile
